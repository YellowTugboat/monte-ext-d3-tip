{"version":3,"file":null,"sources":["../src/D3Tip.js"],"sourcesContent":["const isFunc = monte.tools.isFunc;\nconst isNumeric = monte.tools.isNumeric;\nconst isObject = monte.tools.isObject;\n\nconst TIP_DEFAULTS = {\n  eventPrefix: 'd3tip',\n  css: 'd3-tip',\n  direction: 'n',\n  offset: {},\n  html: (d, i) => d.value || d || i,\n  featurePrefix: null,\n  showEvents: ['mouseover', 'touchstart'],\n  hideEvents: ['mouseout'],\n};\n\nexport class D3Tip extends monte.Extension {\n  _initOptions(...options) {\n    super._initOptions(...options, TIP_DEFAULTS);\n\n    // Throw option error if `featurePrefix` is left blank\n    if (!this.opts.featurePrefix) {\n      throw monte.MonteOptionError.RequiredOption('featurePrefix');\n    }\n  }\n\n  _render() {\n    const featurePrefix = this.tryInvoke(this.option('featurePrefix'));\n    const css = this.tryInvoke(this.option('css'));\n    const dir = this.tryInvoke(this.option('direction'));\n    const html = this.option('html'); // Should always be a function.\n    const offset = this.tryInvoke(this.option('offset'));\n    const showEvents = this.tryInvoke(this.option('showEvents'));\n    const hideEvents = this.tryInvoke(this.option('hideEvents'));\n    const tip = d3.tip().attr('class', css)\n      .direction(dir)\n      .html(html);\n\n    if (!isFunc(html)) {\n      throw new monte.MonteOptionError(`Check the \"html\" option value. A function is expected. Received: ${html}`);\n    }\n\n    if (isObject(offset)) {\n      tip.offset([\n        +offset.y || +offset.top || 0,\n        +offset.x || +offset.left || 0,\n      ]);\n    }\n    else if (isNumeric(offset)) {\n      // If a single number is provided assume that only a vertical shift is intended.\n      tip.offset([+offset, 0]);\n    }\n    else {\n      throw new monte.MonteOptionError(`Check the \"offset\" option value. A function, object, or number is expected. Received: ${offset}`);\n    }\n\n    this.chart.bound.call(tip);\n\n    showEvents.forEach((ev) => this.chart.on(`${featurePrefix}:${ev}`, tip.show));\n    hideEvents.forEach((ev) => this.chart.on(`${featurePrefix}:${ev}`, tip.hide));\n\n    this.tip = tip;\n  }\n\n  // Implemented to indicate that this extension intentionally does not respond to `updated` events.\n  _update() {}\n\n  _destroy() {\n    this.tip.destroy();\n  }\n}\n"],"names":["isFunc","monte","tools","isNumeric","isObject","TIP_DEFAULTS","d","i","value","D3Tip","options","this","opts","featurePrefix","MonteOptionError","RequiredOption","tryInvoke","option","css","dir","html","offset","showEvents","hideEvents","tip","d3","attr","direction","y","top","x","left","chart","bound","call","forEach","ev","_this2","on","show","hide","destroy","Extension"],"mappings":"iwCAAMA,EAASC,MAAMC,MAAMF,OACrBG,EAAYF,MAAMC,MAAMC,UACxBC,EAAWH,MAAMC,MAAME,SAEvBC,eACS,YACR,mBACM,mBAEL,SAACC,EAAGC,SAAMD,GAAEE,OAASF,GAAKC,iBACjB,iBACF,YAAa,0BACb,aAGFE,uMACKC,4JACQA,GAASL,MAG1BM,KAAKC,KAAKC,mBACPZ,OAAMa,iBAAiBC,eAAe,8DAKxCF,EAAgBF,KAAKK,UAAUL,KAAKM,OAAO,kBAC3CC,EAAMP,KAAKK,UAAUL,KAAKM,OAAO,QACjCE,EAAMR,KAAKK,UAAUL,KAAKM,OAAO,cACjCG,EAAOT,KAAKM,OAAO,QACnBI,EAASV,KAAKK,UAAUL,KAAKM,OAAO,WACpCK,EAAaX,KAAKK,UAAUL,KAAKM,OAAO,eACxCM,EAAaZ,KAAKK,UAAUL,KAAKM,OAAO,eACxCO,EAAMC,GAAGD,MAAME,KAAK,QAASR,GAChCS,UAAUR,GACVC,KAAKA,OAEHpB,EAAOoB,QACJ,IAAInB,OAAMa,qFAAqFM,MAGnGhB,EAASiB,KACPA,SACDA,EAAOO,IAAMP,EAAOQ,KAAO,GAC3BR,EAAOS,IAAMT,EAAOU,MAAQ,QAG5B,CAAA,IAAI5B,EAAUkB,QAKX,IAAIpB,OAAMa,0GAA0GO,KAHtHA,SAASA,EAAQ,SAMlBW,MAAMC,MAAMC,KAAKV,KAEXW,QAAQ,SAACC,SAAOC,GAAKL,MAAMM,GAAMzB,MAAiBuB,EAAMZ,EAAIe,UAC5DJ,QAAQ,SAACC,SAAOC,GAAKL,MAAMM,GAAMzB,MAAiBuB,EAAMZ,EAAIgB,aAElEhB,IAAMA,6EAONA,IAAIiB,iBApDcxC,MAAMyC"}